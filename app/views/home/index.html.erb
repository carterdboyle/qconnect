<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>QConnect: Registration MVP</title>
</head>
<body>
  <script type="module">
    import { initOQS, diliKeypair, kyberKeypair, diliSign, diliVerify, kyberDecaps, deriveKPrimeFromSS } from "/pq/oqsClient.js";

    const b64u = (u) => btoa(String.fromCharCode(...u)).replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
    const unb64u = (s) => new Uint8Array(atob(s.replace(/-/g, '+').replace(/_/g, '/')).split('').map(c => c.charCodeAt(0)));
    const enc = (s) => new TextEncoder().encode(s);

    (async () => {
      await initOQS();
      
      // 1) client-side keygen
      const [ps, ss] = await diliKeypair();
      const [pk, sk] = await kyberKeypair();

      // 2) register init
      const initRes = await fetch("/v1/register/init", {
        method: "POST",
        headers: { "Content-Type": "application/json"}, 
        body: JSON.stringify({ handle: "browser_user", ps_b64: b64u(ps), pk_b64: b64u(pk) })
      }).then(r => r.json());

      const { m_b64, ct_b64 } = initRes;
      const M = unb64u(m_b64);
      const C = unb64u(ct_b64);

      // 3) Client decapsulates (with the real Kyber, this derives "K")
      const ss_client = await kyberDecaps(sk, C);

      const Kp = await deriveKPrimeFromSS(ss_client);
      const S = await diliSign(ss, M);

      const verifyRes = await fetch("/v1/register/verify", {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify({ handle: "browser_user", sig_b64: b64u(S), kp_b64: b64u(Kp) })
      }).then(r=>r.json());

      console.log("Registration verify:", verifyRes);
      const p = document.createElement("pre");
      p.textContent = JSON.stringify(verifyRes, null, 2);
      document.body.appendChild(p);
    })();
  </script>
</body>
</html>